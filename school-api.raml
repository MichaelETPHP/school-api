#%RAML 1.0
title: school-api
description: this Project is for testing
version: v1
baseUri: https://localhost:8081/api/v1
protocols:
    - HTTPS
    - HTTP
# Add a new data type for Basic Authentication credentials
types:
  BasicAuth:
    type: object
    properties:
      username:
        type: string
        required: true
      password:
        type: string
        required: true
# securitySchemes.raml
securitySchemes:
  basic_auth:
    type: Basic Authentication
    describedBy:
      headers:
        Authorization: 
          type: string
          required: true
          example: Basic {base64(username:password)}
      responses:
            401:
                body:
                    application/json:
                        examples:
                            {
                            "Msg": "Unauthorized"
                            }
                  
/users:
  get:
    description: Get a list of registered users
    responses:
      200:
        description: Successful response
        body:
          application/json:
            example: 
              [
                {
                  "id": 1,
                  "username": "john_doe",
                  "email": "john.doe@example.com",
                  "password": "********",
                  "registeredAt": "2023-10-29T08:00:00Z"
                },
                {
                  "id": 2,
                  "username": "jane_smith",
                  "email": "jane.smith@example.com",
                  "password": "********",
                  "registeredAt": "2023-10-29T09:30:00Z"
                }
              ]
  post:
   description: Create a new user
   body:
       application/json:
        type: object
        properties:
          username:
            type: string
            required: true
            example: john_doe
          email:
            type: string
            required: true
            example: john.doe@example.com
          password:
            type: string
            required: true
            example: password123
   responses: 
    201:
      description: User created successfully
      body:
         application/json:
           example:
             {
                "id": 2,
                "username": "jane_smith",
                "email": "jane.smith@example.com",
                "password": "********",
                "registeredAt": "2023-10-29T09:30:00Z",
                "message": "User registration successful."
              }
  /{id}:
   uriParameters:
       id:
         type: integer
         required: true
         description: The ID of the user to retrieve or update by ID
   delete:
        securedBy: [basic_auth]
        description:  Delete an existing user by its ID
        responses:
            200:
               description: Successful operation
               body:
                   application/json:
                       example: {"message":"Successfully deleted user with id = 4"}
            400:
               description: Invalid user ID supplied
               body:
                   application/json:
                       example: {"error":"Invalid user ID"}
            404:
               description: User not found
               body:
                   application/json:
                       example: {"error":"User not found"}